package com.wtc.elasticsearch.DocumentAPIs;

import com.wtc.elasticsearch.JavaHighRestApplicationTests;
import lombok.extern.slf4j.Slf4j;
import org.elasticsearch.ElasticsearchException;
import org.elasticsearch.action.ActionListener;
import org.elasticsearch.action.DocWriteRequest;
import org.elasticsearch.action.DocWriteResponse;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.ReplicationResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.common.unit.TimeValue;
import org.elasticsearch.common.xcontent.XContentBuilder;
import org.elasticsearch.common.xcontent.XContentFactory;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.ShardId;
import org.elasticsearch.rest.RestStatus;
import org.junit.After;
import org.junit.Test;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Stream;

/**
 * 通过 Index Api 创建索引和文档
 * @author 吴天成
 * @create 2019/4/15
 * @since 1.0.0
 */
@Slf4j
public class IndexAPI extends JavaHighRestApplicationTests {

    private IndexRequest indexRequest;
    String index = "posts";
    String type = "doc";
    String id = "1";


    /**
     * PUT posts/doc/1
     * {
     *     "user" : "kimchy",
     *     "post_date" : "2013-01-30",
     *     "message" : "trying out Elasticsearch"
     * }
     */
    @Test
    public void indexApiByJson() {
        String jsonString = "{" +
                "\"user\":\"kimchy\"," +
                "\"postDate\":\"2013-01-30\"," +
                "\"message\":\"trying out Elasticsearch\"" +
                "}";

        indexRequest = new IndexRequest(index, type, id);
        log.info("自动生成id的耗时：{}", indexRequest.getAutoGeneratedTimestamp());
        indexRequest.source(jsonString, XContentType.JSON);

        StringBuilder dsl = new StringBuilder();
        dsl.append("PUT ")
                .append(indexRequest.index()).append("/")
                .append(indexRequest.type()).append("/")
                .append(indexRequest.id()).append("\n")
                .append(indexRequest.source().utf8ToString());
        log.info("index api dsl:\n{}", dsl.toString());
    }

    /**
     * PUT posts/doc/1?op_type=create
     * {
     *     "user" : "kimchy",
     *     "post_date" : "2013-01-30",
     *     "message" : "trying out Elasticsearch"
     * }
     *
     * 指定op_type=create，由于posts索引中id为1的文档已存在，上述操作将失败
     */
    @Test
    public void indexApiByXContentBuilder() throws IOException {
        XContentBuilder builder = XContentFactory.jsonBuilder();
        builder.startObject()
                .field("user", "kimchy2")
//                .timeField("postDate", new Date())
                .field("message", "trying out Elasticsearch")
                .endObject();

        indexRequest = new IndexRequest(index, type, id);
        indexRequest.opType(DocWriteRequest.OpType.CREATE);
        indexRequest.source(builder);

        StringBuilder dsl = new StringBuilder();
        dsl.append("PUT ")
                .append(indexRequest.index()).append("/")
                .append(indexRequest.type()).append("/")
                .append(indexRequest.id()).append("?")
                .append("opType=").append(indexRequest.opType()).append("\n")
                .append(indexRequest.source().utf8ToString());
        log.info("index api dsl:\n{}", dsl.toString());
    }

    /**
     * PUT posts/doc/1?timeout=30s&version=2&version_type=external
     * {
     *     "user" : "kimchy",
     *     "post_date" : "2013-01-30",
     *     "message" : "trying out Elasticsearch"
     * }
     *
     * index默认超时为1m，此处设置为30s
     */
    @Test
    public void indexApiByMap() {
        Map<String, Object> jsonMap = new HashMap<>();
        jsonMap.put("user", "kimchy");
        jsonMap.put("postDate", new Date());
        jsonMap.put("message", "trying out Elasticsearch");

        indexRequest = new IndexRequest(index, type, id);
        indexRequest.timeout(TimeValue.timeValueSeconds(2));
        //  外部版本要高于内部版本才能执行成功
        indexRequest.versionType(VersionType.EXTERNAL);
        indexRequest.version(15);
        indexRequest.source(jsonMap);

        StringBuilder dsl = new StringBuilder();
        dsl.append("PUT ")
                .append(indexRequest.index()).append("/")
                .append(indexRequest.type()).append("/")
                .append(indexRequest.id()).append("?")
                .append("timeout=").append(indexRequest.timeout()).append("&")
                .append("versionType=").append(indexRequest.versionType()).append("&")
                .append("version=").append(indexRequest.version()).append("\n")
                .append(indexRequest.source().utf8ToString());
        log.info("index api dsl:\n{}", dsl.toString());
    }

    /**
     * PUT posts/doc/4?refresh=1s
     * {
     *     "user" : "kimchy",
     *     "post_date" : "2013-01-30",
     *     "message" : "trying out Elasticsearch"
     * }
     *
     * index默认超时为1m，此处设置为30s
     */
    @Test
    public void indexApiBySource() {
        indexRequest = new IndexRequest(index, type, id);
        indexRequest.source(
                "user", "kimchy2",
                "postDate", new Date(),
                "message", "trying out Elasticsearch");

        //  wait_for 等待多个操作后再并行执行 默认1s
        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);
        long seqNo = indexRequest.ifSeqNo();
        long primaryTerm = indexRequest.ifPrimaryTerm();
        log.info("seqNo：{}，primaryTerm：{}", seqNo, primaryTerm);
        //  设为true 强制刷新 立即对搜索可见
//        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.IMMEDIATE);

        //  默认为false es会自动刷新后返回
//        indexRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.NONE);

//        indexRequest.setPipeline("pipeline");

        StringBuilder dsl = new StringBuilder();
        dsl.append("PUT ")
                .append(indexRequest.index()).append("/")
                .append(indexRequest.type()).append("/")
                .append(indexRequest.id()).append("?")
                .append("refresh=").append(indexRequest.getRefreshPolicy().getValue()).append("\n")
                .append(indexRequest.source().utf8ToString());
        log.info("index api dsl:\n{}", dsl.toString());
    }

    /**
     * 执行
     */
    @After
    public void syncExecute1 () {

        IndexResponse response = null;
        try {
            response = client.index(indexRequest, RequestOptions.DEFAULT);
            //  Elasticsearch会记录上次操作的序列号和term，以更改它存储的每个文档。
            //  SeqNo在写操作成功后自增
            log.info("上次修改文档的SeqNo:{}, term:{}", response.getSeqNo(), response.getPrimaryTerm());
        } catch (IOException e) {
            e.printStackTrace();
        }

        String index = response.getIndex();
        String type = response.getType();
        String id = response.getId();
        log.info("index={}, type={}, id={}", index, type, id);

        long version = response.getVersion();
        log.info("version={}", version);

        String shardLocation = response.getLocation("kimchy");
        ShardId shardId = response.getShardId();
        long seqNo = response.getSeqNo();
        log.info("shardLocation={}, shardId={}, seqNo={}", shardLocation, shardId, seqNo);

        DocWriteResponse.Result result = response.getResult();
        if (result == DocWriteResponse.Result.CREATED) {
            log.warn("首次创建id为{}的文档", id);
        } else if (result == DocWriteResponse.Result.UPDATED) {
            log.warn("更新id为{}的文档", id);
        } else if (result == DocWriteResponse.Result.NOOP) {
            //  index操作无法设置detect_noop 需要使用update api
            log.warn("更新id为{}的文档", id);
        } else if (result == DocWriteResponse.Result.NOT_FOUND) {
            log.warn("未找到d为{}的文档", id);
        } else if (result == DocWriteResponse.Result.DELETED) {
            log.warn("删除id为{}的文档", id);
        }

        //  执行过程中有分片处理请求失败
        ReplicationResponse.ShardInfo shardInfo = response.getShardInfo();
        Optional<ReplicationResponse.ShardInfo> optionalShardInfo = Optional.ofNullable(shardInfo);
        optionalShardInfo.ifPresent(s ->
                {
                    /**
                     * {
                     *     "_shards" : {
                     *         "total" : 2,
                     *         "failed" : 0,
                     *         "successful" : 2
                     *     }
                     * }
                      */
                    if (s.getTotal() != shardInfo.getSuccessful()) {
                        log.warn("执行请求的分片总数：{}, 有{}个执行成功, 有{}个执行失败",
                                s.getTotal(), s.getSuccessful(), s.getFailed());
                    }

                    if (s.getFailed() > 0) {
                        Stream.of(s.getFailures())
                                .forEach(failure -> System.out.println(failure.reason()));
                    }
                }
        );
    }

//    @Test
//    @After
    public void AsyncExecute() {
        ActionListener<IndexResponse> listener = new ActionListener<IndexResponse>() {
            @Override
            public void onResponse(IndexResponse indexResponse) {
                log.info("Index={}, Type={}, Id={}, Version={}, SeqNo={}, PrimaryTerm={}, ShardInfo={}, ShardId={}",
                        indexResponse.getIndex(), indexResponse.getType(),
                        indexResponse.getId(), indexResponse.getVersion(),
                        indexResponse.getSeqNo(), indexResponse.getPrimaryTerm(),
                        indexResponse.getShardInfo(), indexResponse.getShardId()
                );

                RestStatus status = indexResponse.status();
                if ( status== RestStatus.CREATED) {
                    log.info("result:{}", indexResponse.getResult().getLowercase());
                } else if (status == RestStatus.CONFLICT) {
                    log.info("result:{}", indexResponse.getResult().getLowercase());
                } else if (status == RestStatus.INTERNAL_SERVER_ERROR) {
                    log.info("result:{}", indexResponse.getResult().getLowercase());
                }
            }

            @Override
            public void onFailure(Exception e) {
                log.error(e.getMessage(), e);
            }
        };

        client.indexAsync(indexRequest, RequestOptions.DEFAULT, listener);
    }

    @Test
    public void syncExecute2() {
        IndexRequest request = new IndexRequest("posts", "doc", "1")
                .source("field", "value")
                .setIfSeqNo(5L)
                .setIfPrimaryTerm(1L);
        log.info("dsl：{}", request.toString());

        IndexResponse response = null;
        try {
            response = client.index(request, RequestOptions.DEFAULT);
        } catch(ElasticsearchException e) {
            if (e.status() == RestStatus.CONFLICT) {
                log.error("版本号冲突! version={}", request.version(), e);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}